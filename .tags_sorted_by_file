!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
NAMLEN	closefrom.c	30;"	d	file:
NAMLEN	closefrom.c	33;"	d	file:
OPEN_MAX	closefrom.c	46;"	d	file:
closefrom	closefrom.c	/^closefrom(int lowfd)$/;"	f
dirent	closefrom.c	32;"	d	file:
rcsid	closefrom.c	/^static const char rcsid[] = "$Sudo: closefrom.c,v 1.6 2004\/06\/01 20:51:56 millert Exp $";$/;"	v	file:
do_listen	collector.pl	/^sub do_listen($$)$/;"	s
fuptime	collector.pl	/^sub fuptime($)$/;"	s
process_nf_v1	collector.pl	/^sub process_nf_v1($$)$/;"	s
process_nf_v5	collector.pl	/^sub process_nf_v5($$)$/;"	s
timestamp	collector.pl	/^sub timestamp()$/;"	s
DEFAULT_CTLSOCK	common.h	89;"	d
DEFAULT_PIDFILE	common.h	86;"	d
IPV6_FLOWINFO_MASK	common.h	105;"	d
IPV6_FLOWLABEL_MASK	common.h	108;"	d
IPV6_VERSION	common.h	99;"	d
IPV6_VERSION_MASK	common.h	102;"	d
IP_OFFMASK	common.h	96;"	d
MAX	common.h	119;"	d
MIN	common.h	116;"	d
PROGNAME	common.h	80;"	d
PROGVER	common.h	83;"	d
RCSID	common.h	91;"	d
_BSD_SOURCE	common.h	30;"	d
_PATH_DEVNULL	common.h	112;"	d
_SFD_COMMON_H	common.h	26;"	d
__dead	common.h	127;"	d
__packed	common.h	/^} __packed;$/;"	v	typeref:struct:ip6_ext
__packed	common.h	130;"	d
int16_t	common.h	/^typedef OUR_CFG_INT16_T int16_t;$/;"	t
int32_t	common.h	/^typedef OUR_CFG_INT32_T int32_t;$/;"	t
int64_t	common.h	/^typedef OUR_CFG_INT64_T int64_t;$/;"	t
int8_t	common.h	/^typedef OUR_CFG_INT8_T int8_t;$/;"	t
ip6_ext	common.h	/^struct ip6_ext {$/;"	s
ip6e_len	common.h	/^	u_int8_t ip6e_len;$/;"	m	struct:ip6_ext
ip6e_nxt	common.h	/^	u_int8_t ip6e_nxt;$/;"	m	struct:ip6_ext
offsetof	common.h	122;"	d
u_int16_t	common.h	/^typedef OUR_CFG_U_INT16_T u_int16_t;$/;"	t
u_int32_t	common.h	/^typedef OUR_CFG_U_INT32_T u_int32_t;$/;"	t
u_int64_t	common.h	/^typedef OUR_CFG_U_INT64_T u_int64_t;$/;"	t
u_int8_t	common.h	/^typedef OUR_CFG_U_INT8_T u_int8_t;$/;"	t
DAYS	convtime.c	31;"	d	file:
HOURS	convtime.c	30;"	d	file:
MINUTES	convtime.c	29;"	d	file:
SECONDS	convtime.c	28;"	d	file:
WEEKS	convtime.c	32;"	d	file:
convtime	convtime.c	/^convtime(const char *s)$/;"	f
daemon	daemon.c	/^daemon(int nochdir, int noclose)$/;"	f
rcsid	daemon.c	/^static char rcsid[] = "$OpenBSD: daemon.c,v 1.5 2003\/07\/15 17:32:41 deraadt Exp $";$/;"	v	file:
FLOGIT	freelist.c	39;"	d	file:
FLOGIT	freelist.c	41;"	d	file:
FREELIST_ALLOC_ALIGN	freelist.c	30;"	d	file:
FREELIST_DEBUG	freelist.c	37;"	d	file:
FREELIST_INITIAL_ALLOC	freelist.c	31;"	d	file:
FREELIST_MAX_ALLOC	freelist.c	29;"	d	file:
freelist_get	freelist.c	/^freelist_get(struct freelist *fl)$/;"	f
freelist_grow	freelist.c	/^freelist_grow(struct freelist *fl)$/;"	f	file:
freelist_init	freelist.c	/^freelist_init(struct freelist *fl, size_t allocsz)$/;"	f
freelist_put	freelist.c	/^freelist_put(struct freelist *fl, void *p)$/;"	f
roundup	freelist.c	34;"	d	file:
_FREELIST_H	freelist.h	26;"	d
allocsz	freelist.h	/^	size_t allocsz;$/;"	m	struct:freelist
free_entries	freelist.h	/^	void **free_entries;$/;"	m	struct:freelist
freelist	freelist.h	/^struct freelist {$/;"	s
nalloc	freelist.h	/^	size_t nalloc;$/;"	m	struct:freelist
navail	freelist.h	/^	size_t navail;$/;"	m	struct:freelist
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
IPFIX_DEFAULT_TEMPLATE_INTERVAL	ipfix.c	222;"	d	file:
IPFIX_FIELD_SPECIFIER	ipfix.c	/^struct IPFIX_FIELD_SPECIFIER {$/;"	s	file:
IPFIX_HEADER	ipfix.c	/^struct IPFIX_HEADER {$/;"	s	file:
IPFIX_MIN_RECORD_SET_ID	ipfix.c	68;"	d	file:
IPFIX_OPTION_SCOPE_CACHE	ipfix.c	228;"	d	file:
IPFIX_OPTION_SCOPE_INTERFACE	ipfix.c	226;"	d	file:
IPFIX_OPTION_SCOPE_LINECARD	ipfix.c	227;"	d	file:
IPFIX_OPTION_SCOPE_SYSTEM	ipfix.c	225;"	d	file:
IPFIX_OPTION_SCOPE_TEMPLATE	ipfix.c	229;"	d	file:
IPFIX_OPTION_TEMPLATE_SET_HEADER	ipfix.c	/^struct IPFIX_OPTION_TEMPLATE_SET_HEADER {$/;"	s	file:
IPFIX_OPTION_TEMPLATE_SET_ID	ipfix.c	67;"	d	file:
IPFIX_SAMPLING_ALGORITHM_DETERMINISTIC	ipfix.c	231;"	d	file:
IPFIX_SAMPLING_ALGORITHM_RANDOM	ipfix.c	232;"	d	file:
IPFIX_SET_HEADER	ipfix.c	/^struct IPFIX_SET_HEADER {$/;"	s	file:
IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4	ipfix.c	/^struct IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4 {$/;"	s	file:
IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6	ipfix.c	/^struct IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6 {$/;"	s	file:
IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE	ipfix.c	/^struct IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE {$/;"	s	file:
IPFIX_SOFTFLOWD_DATA_BIDIRECTION	ipfix.c	/^struct IPFIX_SOFTFLOWD_DATA_BIDIRECTION {$/;"	s	file:
IPFIX_SOFTFLOWD_DATA_COMMON	ipfix.c	/^struct IPFIX_SOFTFLOWD_DATA_COMMON {$/;"	s	file:
IPFIX_SOFTFLOWD_DATA_TIME	ipfix.c	/^union IPFIX_SOFTFLOWD_DATA_TIME {$/;"	u	file:
IPFIX_SOFTFLOWD_DATA_V4	ipfix.c	/^struct IPFIX_SOFTFLOWD_DATA_V4 {$/;"	s	file:
IPFIX_SOFTFLOWD_DATA_V6	ipfix.c	/^struct IPFIX_SOFTFLOWD_DATA_V6 {$/;"	s	file:
IPFIX_SOFTFLOWD_MAX_PACKET_SIZE	ipfix.c	217;"	d	file:
IPFIX_SOFTFLOWD_OPTION_DATA	ipfix.c	/^struct IPFIX_SOFTFLOWD_OPTION_DATA {$/;"	s	file:
IPFIX_SOFTFLOWD_OPTION_TEMPLATE	ipfix.c	/^struct IPFIX_SOFTFLOWD_OPTION_TEMPLATE {$/;"	s	file:
IPFIX_SOFTFLOWD_OPTION_TEMPLATE_ID	ipfix.c	220;"	d	file:
IPFIX_SOFTFLOWD_OPTION_TEMPLATE_NRECORDS	ipfix.c	148;"	d	file:
IPFIX_SOFTFLOWD_OPTION_TEMPLATE_SCOPE_RECORDS	ipfix.c	147;"	d	file:
IPFIX_SOFTFLOWD_TEMPLATE	ipfix.c	/^struct IPFIX_SOFTFLOWD_TEMPLATE {$/;"	s	file:
IPFIX_SOFTFLOWD_TEMPLATE_BIDIRECTION_NRECORDS	ipfix.c	130;"	d	file:
IPFIX_SOFTFLOWD_TEMPLATE_COMMONRECORDS	ipfix.c	122;"	d	file:
IPFIX_SOFTFLOWD_TEMPLATE_NRECORDS	ipfix.c	126;"	d	file:
IPFIX_SOFTFLOWD_TEMPLATE_TIMERECORDS	ipfix.c	123;"	d	file:
IPFIX_SOFTFLOWD_TEMPLATE_VENDORRECORDS	ipfix.c	124;"	d	file:
IPFIX_SOFTFLOWD_V4_TEMPLATE_ID	ipfix.c	218;"	d	file:
IPFIX_SOFTFLOWD_V6_TEMPLATE_ID	ipfix.c	219;"	d	file:
IPFIX_TEMPLATE_RECORD_HEADER	ipfix.c	/^struct IPFIX_TEMPLATE_RECORD_HEADER {$/;"	s	file:
IPFIX_TEMPLATE_SET_HEADER	ipfix.c	/^struct IPFIX_TEMPLATE_SET_HEADER {$/;"	s	file:
IPFIX_TEMPLATE_SET_ID	ipfix.c	66;"	d	file:
IPFIX_VENDOR_FIELD_SPECIFIER	ipfix.c	/^struct IPFIX_VENDOR_FIELD_SPECIFIER {$/;"	s	file:
IPFIX_destinationIPv4Address	ipfix.c	83;"	d	file:
IPFIX_destinationIPv6Address	ipfix.c	91;"	d	file:
IPFIX_destinationTransportPort	ipfix.c	82;"	d	file:
IPFIX_egressInterface	ipfix.c	85;"	d	file:
IPFIX_flowEndMicroSeconds	ipfix.c	109;"	d	file:
IPFIX_flowEndMilliSeconds	ipfix.c	107;"	d	file:
IPFIX_flowEndNanoSeconds	ipfix.c	111;"	d	file:
IPFIX_flowEndSeconds	ipfix.c	105;"	d	file:
IPFIX_flowEndSysUpTime	ipfix.c	87;"	d	file:
IPFIX_flowStartMicroSeconds	ipfix.c	108;"	d	file:
IPFIX_flowStartMilliSeconds	ipfix.c	106;"	d	file:
IPFIX_flowStartNanoSeconds	ipfix.c	110;"	d	file:
IPFIX_flowStartSeconds	ipfix.c	104;"	d	file:
IPFIX_flowStartSysUpTime	ipfix.c	88;"	d	file:
IPFIX_icmpTypeCodeIPv4	ipfix.c	93;"	d	file:
IPFIX_icmpTypeCodeIPv6	ipfix.c	100;"	d	file:
IPFIX_ingressInterface	ipfix.c	81;"	d	file:
IPFIX_ipClassOfService	ipfix.c	75;"	d	file:
IPFIX_ipVersion	ipfix.c	98;"	d	file:
IPFIX_meteringProcessId	ipfix.c	102;"	d	file:
IPFIX_octetDeltaCount	ipfix.c	71;"	d	file:
IPFIX_packetDeltaCount	ipfix.c	72;"	d	file:
IPFIX_protocolIdentifier	ipfix.c	74;"	d	file:
IPFIX_sourceIPv4Address	ipfix.c	79;"	d	file:
IPFIX_sourceIPv6Address	ipfix.c	90;"	d	file:
IPFIX_sourceTransportPort	ipfix.c	78;"	d	file:
IPFIX_systemInitTimeMilliseconds	ipfix.c	113;"	d	file:
IPFIX_tcpControlBits	ipfix.c	77;"	d	file:
IPFIX_vlanId	ipfix.c	96;"	d	file:
JAN_1970	ipfix.c	34;"	d	file:
PSAMP_samplingPacketInterval	ipfix.c	116;"	d	file:
PSAMP_samplingPacketSpace	ipfix.c	117;"	d	file:
PSAMP_selectorAlgorithm	ipfix.c	115;"	d	file:
PSAMP_selectorAlgorithm_count	ipfix.c	119;"	d	file:
REVERSE_PEN	ipfix.c	64;"	d	file:
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_FIELD_SPECIFIER
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_HEADER
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_OPTION_TEMPLATE_SET_HEADER
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SET_HEADER
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_DATA_BIDIRECTION
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_DATA_COMMON
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_DATA_V4
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_DATA_V6
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_OPTION_DATA
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_OPTION_TEMPLATE
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_TEMPLATE
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_TEMPLATE_RECORD_HEADER
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_TEMPLATE_SET_HEADER
__packed	ipfix.c	/^} __packed;$/;"	v	typeref:struct:IPFIX_VENDOR_FIELD_SPECIFIER
b	ipfix.c	/^	struct IPFIX_SOFTFLOWD_DATA_BIDIRECTION b;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4::IPFIX_SOFTFLOWD_DATA_BIDIRECTION	file:
b	ipfix.c	/^	struct IPFIX_SOFTFLOWD_DATA_BIDIRECTION b;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6::IPFIX_SOFTFLOWD_DATA_BIDIRECTION	file:
c	ipfix.c	/^	struct IPFIX_SET_HEADER c;	$/;"	m	struct:IPFIX_SOFTFLOWD_OPTION_DATA	typeref:struct:IPFIX_SOFTFLOWD_OPTION_DATA::IPFIX_SET_HEADER	file:
c	ipfix.c	/^	struct IPFIX_SET_HEADER c;$/;"	m	struct:IPFIX_OPTION_TEMPLATE_SET_HEADER	typeref:struct:IPFIX_OPTION_TEMPLATE_SET_HEADER::IPFIX_SET_HEADER	file:
c	ipfix.c	/^	struct IPFIX_SET_HEADER c;$/;"	m	struct:IPFIX_TEMPLATE_SET_HEADER	typeref:struct:IPFIX_TEMPLATE_SET_HEADER::IPFIX_SET_HEADER	file:
c	ipfix.c	/^	struct IPFIX_SOFTFLOWD_DATA_COMMON c;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4::IPFIX_SOFTFLOWD_DATA_COMMON	file:
c	ipfix.c	/^	struct IPFIX_SOFTFLOWD_DATA_COMMON c;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6::IPFIX_SOFTFLOWD_DATA_COMMON	file:
c	ipfix.c	/^	struct IPFIX_SOFTFLOWD_DATA_COMMON c;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_V4	typeref:struct:IPFIX_SOFTFLOWD_DATA_V4::IPFIX_SOFTFLOWD_DATA_COMMON	file:
c	ipfix.c	/^	struct IPFIX_SOFTFLOWD_DATA_COMMON c;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_V6	typeref:struct:IPFIX_SOFTFLOWD_DATA_V6::IPFIX_SOFTFLOWD_DATA_COMMON	file:
count	ipfix.c	/^	u_int16_t template_id, count;$/;"	m	struct:IPFIX_TEMPLATE_RECORD_HEADER	file:
destinationIPv4Address	ipfix.c	/^	u_int32_t sourceIPv4Address, destinationIPv4Address;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4	file:
destinationIPv4Address	ipfix.c	/^	u_int32_t sourceIPv4Address, destinationIPv4Address;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_V4	file:
destinationIPv6Address	ipfix.c	/^	struct in6_addr sourceIPv6Address, destinationIPv6Address;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6::	file:
destinationIPv6Address	ipfix.c	/^	struct in6_addr sourceIPv6Address, destinationIPv6Address;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_V6	typeref:struct:IPFIX_SOFTFLOWD_DATA_V6::	file:
destinationTransportPort	ipfix.c	/^	u_int16_t sourceTransportPort, destinationTransportPort;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
egressInterface	ipfix.c	/^	u_int32_t ingressInterface, egressInterface;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
end	ipfix.c	/^		u_int32_t end;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_TIME::__anon1	file:
end	ipfix.c	/^		u_int64_t end;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_TIME::__anon2	file:
export_time	ipfix.c	/^	u_int32_t export_time;	\/* in seconds *\/$/;"	m	struct:IPFIX_HEADER	file:
h	ipfix.c	/^	struct IPFIX_OPTION_TEMPLATE_SET_HEADER h;$/;"	m	struct:IPFIX_SOFTFLOWD_OPTION_TEMPLATE	typeref:struct:IPFIX_SOFTFLOWD_OPTION_TEMPLATE::IPFIX_OPTION_TEMPLATE_SET_HEADER	file:
h	ipfix.c	/^	struct IPFIX_TEMPLATE_SET_HEADER h;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE::IPFIX_TEMPLATE_SET_HEADER	file:
h	ipfix.c	/^	struct IPFIX_TEMPLATE_SET_HEADER h;$/;"	m	struct:IPFIX_SOFTFLOWD_TEMPLATE	typeref:struct:IPFIX_SOFTFLOWD_TEMPLATE::IPFIX_TEMPLATE_SET_HEADER	file:
htobe64	ipfix.c	32;"	d	file:
icmpTypeCode	ipfix.c	/^	u_int16_t icmpTypeCode, vlanId;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
icmpTypeCode	ipfix.c	/^	u_int16_t icmpTypeCode;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_BIDIRECTION	file:
ie	ipfix.c	/^	u_int16_t ie, length;$/;"	m	struct:IPFIX_FIELD_SPECIFIER	file:
ie	ipfix.c	/^	u_int16_t ie, length;$/;"	m	struct:IPFIX_VENDOR_FIELD_SPECIFIER	file:
ingressInterface	ipfix.c	/^	u_int32_t ingressInterface, egressInterface;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
ipClassOfService	ipfix.c	/^	u_int8_t protocolIdentifier, tcpControlBits, ipVersion, ipClassOfService;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
ipClassOfService	ipfix.c	/^	u_int8_t tcpControlBits, ipClassOfService;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_BIDIRECTION	file:
ipVersion	ipfix.c	/^	u_int8_t protocolIdentifier, tcpControlBits, ipVersion, ipClassOfService;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
ipfix_flow_to_bidirection_flowset	ipfix.c	/^ipfix_flow_to_bidirection_flowset(const struct FLOW *flow, u_char *packet,$/;"	f	file:
ipfix_flow_to_flowset	ipfix.c	/^ipfix_flow_to_flowset(const struct FLOW *flow, u_char *packet, u_int len,$/;"	f	file:
ipfix_init_option	ipfix.c	/^ipfix_init_option(struct timeval *system_boot_time, struct OPTION *option) {$/;"	f	file:
ipfix_init_template	ipfix.c	/^ipfix_init_template(struct FLOWTRACKPARAMETERS *param)$/;"	f	file:
ipfix_init_template_bidirection	ipfix.c	/^ipfix_init_template_bidirection(struct FLOWTRACKPARAMETERS *param)$/;"	f	file:
ipfix_pkts_until_template	ipfix.c	/^static int ipfix_pkts_until_template = -1;$/;"	v	file:
ipfix_resend_template	ipfix.c	/^ipfix_resend_template(void)$/;"	f
length	ipfix.c	/^	u_int16_t ie, length;$/;"	m	struct:IPFIX_FIELD_SPECIFIER	file:
length	ipfix.c	/^	u_int16_t ie, length;$/;"	m	struct:IPFIX_VENDOR_FIELD_SPECIFIER	file:
length	ipfix.c	/^	u_int16_t set_id, length;$/;"	m	struct:IPFIX_SET_HEADER	file:
length	ipfix.c	/^	u_int16_t version, length;$/;"	m	struct:IPFIX_HEADER	file:
octetDeltaCount	ipfix.c	/^	u_int32_t octetDeltaCount, packetDeltaCount;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_BIDIRECTION	file:
octetDeltaCount	ipfix.c	/^	u_int32_t octetDeltaCount, packetDeltaCount;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
od_id	ipfix.c	/^	u_int32_t sequence, od_id;$/;"	m	struct:IPFIX_HEADER	file:
option_data	ipfix.c	/^static struct IPFIX_SOFTFLOWD_OPTION_DATA option_data;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_OPTION_DATA	file:
option_template	ipfix.c	/^static struct IPFIX_SOFTFLOWD_OPTION_TEMPLATE option_template;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_OPTION_TEMPLATE	file:
packetDeltaCount	ipfix.c	/^	u_int32_t octetDeltaCount, packetDeltaCount;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_BIDIRECTION	file:
packetDeltaCount	ipfix.c	/^	u_int32_t octetDeltaCount, packetDeltaCount;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
pen	ipfix.c	/^	u_int32_t pen;$/;"	m	struct:IPFIX_VENDOR_FIELD_SPECIFIER	file:
protocolIdentifier	ipfix.c	/^	u_int8_t protocolIdentifier, tcpControlBits, ipVersion, ipClassOfService;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
r	ipfix.c	/^	struct IPFIX_FIELD_SPECIFIER r[IPFIX_SOFTFLOWD_OPTION_TEMPLATE_NRECORDS];$/;"	m	struct:IPFIX_SOFTFLOWD_OPTION_TEMPLATE	typeref:struct:IPFIX_SOFTFLOWD_OPTION_TEMPLATE::IPFIX_FIELD_SPECIFIER	file:
r	ipfix.c	/^	struct IPFIX_FIELD_SPECIFIER r[IPFIX_SOFTFLOWD_TEMPLATE_COMMONRECORDS];$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE::IPFIX_FIELD_SPECIFIER	file:
r	ipfix.c	/^	struct IPFIX_FIELD_SPECIFIER r[IPFIX_SOFTFLOWD_TEMPLATE_NRECORDS];$/;"	m	struct:IPFIX_SOFTFLOWD_TEMPLATE	typeref:struct:IPFIX_SOFTFLOWD_TEMPLATE::IPFIX_FIELD_SPECIFIER	file:
r	ipfix.c	/^	struct IPFIX_TEMPLATE_RECORD_HEADER r;$/;"	m	struct:IPFIX_OPTION_TEMPLATE_SET_HEADER	typeref:struct:IPFIX_OPTION_TEMPLATE_SET_HEADER::IPFIX_TEMPLATE_RECORD_HEADER	file:
r	ipfix.c	/^	struct IPFIX_TEMPLATE_RECORD_HEADER r;$/;"	m	struct:IPFIX_TEMPLATE_SET_HEADER	typeref:struct:IPFIX_TEMPLATE_SET_HEADER::IPFIX_TEMPLATE_RECORD_HEADER	file:
s	ipfix.c	/^	struct IPFIX_FIELD_SPECIFIER s[IPFIX_SOFTFLOWD_OPTION_TEMPLATE_SCOPE_RECORDS];$/;"	m	struct:IPFIX_SOFTFLOWD_OPTION_TEMPLATE	typeref:struct:IPFIX_SOFTFLOWD_OPTION_TEMPLATE::IPFIX_FIELD_SPECIFIER	file:
samplingAlgorithm	ipfix.c	/^	u_int16_t samplingAlgorithm;$/;"	m	struct:IPFIX_SOFTFLOWD_OPTION_DATA	file:
samplingInterval	ipfix.c	/^	u_int16_t samplingInterval;$/;"	m	struct:IPFIX_SOFTFLOWD_OPTION_DATA	file:
samplingSpace	ipfix.c	/^	u_int32_t samplingSpace;$/;"	m	struct:IPFIX_SOFTFLOWD_OPTION_DATA	file:
scope_count	ipfix.c	/^	u_int16_t scope_count;$/;"	m	struct:IPFIX_OPTION_TEMPLATE_SET_HEADER	file:
scope_pid	ipfix.c	/^	u_int32_t scope_pid;$/;"	m	struct:IPFIX_SOFTFLOWD_OPTION_DATA	file:
send_ipfix	ipfix.c	/^send_ipfix(struct FLOW **flows, int num_flows, int nfsock,$/;"	f
send_ipfix_bidirection	ipfix.c	/^send_ipfix_bidirection(struct FLOW **flows, int num_flows, int nfsock,$/;"	f
sequence	ipfix.c	/^	u_int32_t sequence, od_id;$/;"	m	struct:IPFIX_HEADER	file:
set_id	ipfix.c	/^	u_int16_t set_id, length;$/;"	m	struct:IPFIX_SET_HEADER	file:
sourceIPv4Address	ipfix.c	/^	u_int32_t sourceIPv4Address, destinationIPv4Address;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4	file:
sourceIPv4Address	ipfix.c	/^	u_int32_t sourceIPv4Address, destinationIPv4Address;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_V4	file:
sourceIPv6Address	ipfix.c	/^	struct in6_addr sourceIPv6Address, destinationIPv6Address;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6::in6_addr	file:
sourceIPv6Address	ipfix.c	/^	struct in6_addr sourceIPv6Address, destinationIPv6Address;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_V6	typeref:struct:IPFIX_SOFTFLOWD_DATA_V6::in6_addr	file:
sourceTransportPort	ipfix.c	/^	u_int16_t sourceTransportPort, destinationTransportPort;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
start	ipfix.c	/^		u_int32_t start;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_TIME::__anon1	file:
start	ipfix.c	/^		u_int64_t start;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_TIME::__anon2	file:
systemInitTimeMilliseconds	ipfix.c	/^	u_int64_t systemInitTimeMilliseconds;$/;"	m	struct:IPFIX_SOFTFLOWD_OPTION_DATA	file:
t	ipfix.c	/^	struct IPFIX_FIELD_SPECIFIER t[IPFIX_SOFTFLOWD_TEMPLATE_TIMERECORDS];$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE::IPFIX_FIELD_SPECIFIER	file:
t	ipfix.c	/^	union  IPFIX_SOFTFLOWD_DATA_TIME t;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4	typeref:union:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V4::IPFIX_SOFTFLOWD_DATA_TIME	file:
t	ipfix.c	/^	union  IPFIX_SOFTFLOWD_DATA_TIME t;$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6	typeref:union:IPFIX_SOFTFLOWD_BIDIRECTION_DATA_V6::IPFIX_SOFTFLOWD_DATA_TIME	file:
t	ipfix.c	/^	union  IPFIX_SOFTFLOWD_DATA_TIME t;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_V4	typeref:union:IPFIX_SOFTFLOWD_DATA_V4::IPFIX_SOFTFLOWD_DATA_TIME	file:
t	ipfix.c	/^	union  IPFIX_SOFTFLOWD_DATA_TIME t;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_V6	typeref:union:IPFIX_SOFTFLOWD_DATA_V6::IPFIX_SOFTFLOWD_DATA_TIME	file:
tcpControlBits	ipfix.c	/^	u_int8_t protocolIdentifier, tcpControlBits, ipVersion, ipClassOfService;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
tcpControlBits	ipfix.c	/^	u_int8_t tcpControlBits, ipClassOfService;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_BIDIRECTION	file:
template_id	ipfix.c	/^	u_int16_t template_id, count;$/;"	m	struct:IPFIX_TEMPLATE_RECORD_HEADER	file:
u32	ipfix.c	/^	} u32;$/;"	m	union:IPFIX_SOFTFLOWD_DATA_TIME	typeref:struct:IPFIX_SOFTFLOWD_DATA_TIME::__anon1	file:
u64	ipfix.c	/^	} u64;$/;"	m	union:IPFIX_SOFTFLOWD_DATA_TIME	typeref:struct:IPFIX_SOFTFLOWD_DATA_TIME::__anon2	file:
v	ipfix.c	/^	struct IPFIX_VENDOR_FIELD_SPECIFIER v[IPFIX_SOFTFLOWD_TEMPLATE_VENDORRECORDS];$/;"	m	struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE::IPFIX_VENDOR_FIELD_SPECIFIER	file:
v4_bidirection_template	ipfix.c	/^static struct IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE v4_bidirection_template;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE	file:
v4_template	ipfix.c	/^static struct IPFIX_SOFTFLOWD_TEMPLATE v4_template;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_TEMPLATE	file:
v6_bidirection_template	ipfix.c	/^static struct IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE v6_bidirection_template;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_BIDIRECTION_TEMPLATE	file:
v6_template	ipfix.c	/^static struct IPFIX_SOFTFLOWD_TEMPLATE v6_template;$/;"	v	typeref:struct:IPFIX_SOFTFLOWD_TEMPLATE	file:
version	ipfix.c	/^	u_int16_t version, length;$/;"	m	struct:IPFIX_HEADER	file:
vlanId	ipfix.c	/^	u_int16_t icmpTypeCode, vlanId;$/;"	m	struct:IPFIX_SOFTFLOWD_DATA_COMMON	file:
loginit	log.c	/^loginit(const char *ident, int to_stderr)$/;"	f
logit	log.c	/^logit(int level, const char *fmt,...)$/;"	f
logstderr	log.c	/^static int logstderr = 0;$/;"	v	file:
_LOG_H	log.h	26;"	d
NF1_FLOW	netflow1.c	/^struct NF1_FLOW {$/;"	s	file:
NF1_HEADER	netflow1.c	/^struct NF1_HEADER {$/;"	s	file:
NF1_MAXFLOWS	netflow1.c	54;"	d	file:
NF1_MAXPACKET_SIZE	netflow1.c	55;"	d	file:
dest_ip	netflow1.c	/^	u_int32_t src_ip, dest_ip, nexthop_ip;$/;"	m	struct:NF1_FLOW	file:
dest_port	netflow1.c	/^	u_int16_t src_port, dest_port;$/;"	m	struct:NF1_FLOW	file:
flow_finish	netflow1.c	/^	u_int32_t flow_start, flow_finish;$/;"	m	struct:NF1_FLOW	file:
flow_octets	netflow1.c	/^	u_int32_t flow_packets, flow_octets;$/;"	m	struct:NF1_FLOW	file:
flow_packets	netflow1.c	/^	u_int32_t flow_packets, flow_octets;$/;"	m	struct:NF1_FLOW	file:
flow_start	netflow1.c	/^	u_int32_t flow_start, flow_finish;$/;"	m	struct:NF1_FLOW	file:
flows	netflow1.c	/^	u_int16_t version, flows;$/;"	m	struct:NF1_HEADER	file:
if_index_in	netflow1.c	/^	u_int16_t if_index_in, if_index_out;$/;"	m	struct:NF1_FLOW	file:
if_index_out	netflow1.c	/^	u_int16_t if_index_in, if_index_out;$/;"	m	struct:NF1_FLOW	file:
nexthop_ip	netflow1.c	/^	u_int32_t src_ip, dest_ip, nexthop_ip;$/;"	m	struct:NF1_FLOW	file:
pad1	netflow1.c	/^	u_int16_t pad1;$/;"	m	struct:NF1_FLOW	file:
pad2	netflow1.c	/^	u_int8_t pad2, pad3, pad4;$/;"	m	struct:NF1_FLOW	file:
pad3	netflow1.c	/^	u_int8_t pad2, pad3, pad4;$/;"	m	struct:NF1_FLOW	file:
pad4	netflow1.c	/^	u_int8_t pad2, pad3, pad4;$/;"	m	struct:NF1_FLOW	file:
protocol	netflow1.c	/^	u_int8_t protocol, tos, tcp_flags;$/;"	m	struct:NF1_FLOW	file:
reserved1	netflow1.c	/^	u_int32_t reserved1;$/;"	m	struct:NF1_FLOW	file:
send_netflow_v1	netflow1.c	/^send_netflow_v1(struct FLOW **flows, int num_flows, int nfsock,$/;"	f
src_ip	netflow1.c	/^	u_int32_t src_ip, dest_ip, nexthop_ip;$/;"	m	struct:NF1_FLOW	file:
src_port	netflow1.c	/^	u_int16_t src_port, dest_port;$/;"	m	struct:NF1_FLOW	file:
tcp_flags	netflow1.c	/^	u_int8_t protocol, tos, tcp_flags;$/;"	m	struct:NF1_FLOW	file:
time_nanosec	netflow1.c	/^	u_int32_t uptime_ms, time_sec, time_nanosec;$/;"	m	struct:NF1_HEADER	file:
time_sec	netflow1.c	/^	u_int32_t uptime_ms, time_sec, time_nanosec;$/;"	m	struct:NF1_HEADER	file:
tos	netflow1.c	/^	u_int8_t protocol, tos, tcp_flags;$/;"	m	struct:NF1_FLOW	file:
uptime_ms	netflow1.c	/^	u_int32_t uptime_ms, time_sec, time_nanosec;$/;"	m	struct:NF1_HEADER	file:
version	netflow1.c	/^	u_int16_t version, flows;$/;"	m	struct:NF1_HEADER	file:
NF5_FLOW	netflow5.c	/^struct NF5_FLOW {$/;"	s	file:
NF5_HEADER	netflow5.c	/^struct NF5_HEADER {$/;"	s	file:
NF5_MAXFLOWS	netflow5.c	53;"	d	file:
NF5_MAXPACKET_SIZE	netflow5.c	54;"	d	file:
dest_as	netflow5.c	/^	u_int16_t src_as, dest_as;$/;"	m	struct:NF5_FLOW	file:
dest_ip	netflow5.c	/^	u_int32_t src_ip, dest_ip, nexthop_ip;$/;"	m	struct:NF5_FLOW	file:
dest_port	netflow5.c	/^	u_int16_t src_port, dest_port;$/;"	m	struct:NF5_FLOW	file:
dst_mask	netflow5.c	/^	u_int8_t src_mask, dst_mask;$/;"	m	struct:NF5_FLOW	file:
engine_id	netflow5.c	/^	u_int8_t engine_type, engine_id;$/;"	m	struct:NF5_HEADER	file:
engine_type	netflow5.c	/^	u_int8_t engine_type, engine_id;$/;"	m	struct:NF5_HEADER	file:
flow_finish	netflow5.c	/^	u_int32_t flow_start, flow_finish;$/;"	m	struct:NF5_FLOW	file:
flow_octets	netflow5.c	/^	u_int32_t flow_packets, flow_octets;$/;"	m	struct:NF5_FLOW	file:
flow_packets	netflow5.c	/^	u_int32_t flow_packets, flow_octets;$/;"	m	struct:NF5_FLOW	file:
flow_sequence	netflow5.c	/^	u_int32_t uptime_ms, time_sec, time_nanosec, flow_sequence;$/;"	m	struct:NF5_HEADER	file:
flow_start	netflow5.c	/^	u_int32_t flow_start, flow_finish;$/;"	m	struct:NF5_FLOW	file:
flows	netflow5.c	/^	u_int16_t version, flows;$/;"	m	struct:NF5_HEADER	file:
if_index_in	netflow5.c	/^	u_int16_t if_index_in, if_index_out;$/;"	m	struct:NF5_FLOW	file:
if_index_out	netflow5.c	/^	u_int16_t if_index_in, if_index_out;$/;"	m	struct:NF5_FLOW	file:
nexthop_ip	netflow5.c	/^	u_int32_t src_ip, dest_ip, nexthop_ip;$/;"	m	struct:NF5_FLOW	file:
pad1	netflow5.c	/^	u_int8_t pad1;$/;"	m	struct:NF5_FLOW	file:
pad2	netflow5.c	/^	u_int16_t pad2;$/;"	m	struct:NF5_FLOW	file:
protocol	netflow5.c	/^	u_int8_t tcp_flags, protocol, tos;$/;"	m	struct:NF5_FLOW	file:
sampling_interval	netflow5.c	/^	u_int16_t sampling_interval;$/;"	m	struct:NF5_HEADER	file:
send_netflow_v5	netflow5.c	/^send_netflow_v5(struct FLOW **flows, int num_flows, int nfsock,$/;"	f
src_as	netflow5.c	/^	u_int16_t src_as, dest_as;$/;"	m	struct:NF5_FLOW	file:
src_ip	netflow5.c	/^	u_int32_t src_ip, dest_ip, nexthop_ip;$/;"	m	struct:NF5_FLOW	file:
src_mask	netflow5.c	/^	u_int8_t src_mask, dst_mask;$/;"	m	struct:NF5_FLOW	file:
src_port	netflow5.c	/^	u_int16_t src_port, dest_port;$/;"	m	struct:NF5_FLOW	file:
tcp_flags	netflow5.c	/^	u_int8_t tcp_flags, protocol, tos;$/;"	m	struct:NF5_FLOW	file:
time_nanosec	netflow5.c	/^	u_int32_t uptime_ms, time_sec, time_nanosec, flow_sequence;$/;"	m	struct:NF5_HEADER	file:
time_sec	netflow5.c	/^	u_int32_t uptime_ms, time_sec, time_nanosec, flow_sequence;$/;"	m	struct:NF5_HEADER	file:
tos	netflow5.c	/^	u_int8_t tcp_flags, protocol, tos;$/;"	m	struct:NF5_FLOW	file:
uptime_ms	netflow5.c	/^	u_int32_t uptime_ms, time_sec, time_nanosec, flow_sequence;$/;"	m	struct:NF5_HEADER	file:
version	netflow5.c	/^	u_int16_t version, flows;$/;"	m	struct:NF5_HEADER	file:
NF9_DATA_FLOWSET_HEADER	netflow9.c	/^struct NF9_DATA_FLOWSET_HEADER {$/;"	s	file:
NF9_DEFAULT_TEMPLATE_INTERVAL	netflow9.c	144;"	d	file:
NF9_FIRST_SWITCHED	netflow9.c	75;"	d	file:
NF9_FLOWSET_HEADER_COMMON	netflow9.c	/^struct NF9_FLOWSET_HEADER_COMMON {$/;"	s	file:
NF9_HEADER	netflow9.c	/^struct NF9_HEADER {$/;"	s	file:
NF9_ICMP_TYPE	netflow9.c	80;"	d	file:
NF9_IF_INDEX_IN	netflow9.c	68;"	d	file:
NF9_IF_INDEX_OUT	netflow9.c	72;"	d	file:
NF9_IN_BYTES	netflow9.c	58;"	d	file:
NF9_IN_PACKETS	netflow9.c	59;"	d	file:
NF9_IPV4_DST_ADDR	netflow9.c	70;"	d	file:
NF9_IPV4_SRC_ADDR	netflow9.c	66;"	d	file:
NF9_IPV6_DST_ADDR	netflow9.c	78;"	d	file:
NF9_IPV6_SRC_ADDR	netflow9.c	77;"	d	file:
NF9_IP_PROTOCOL_VERSION	netflow9.c	87;"	d	file:
NF9_L4_DST_PORT	netflow9.c	69;"	d	file:
NF9_L4_SRC_PORT	netflow9.c	65;"	d	file:
NF9_LAST_SWITCHED	netflow9.c	74;"	d	file:
NF9_MIN_RECORD_FLOWSET_ID	netflow9.c	55;"	d	file:
NF9_OPTIONS_FLOWSET_ID	netflow9.c	54;"	d	file:
NF9_OPTION_SCOPE_CACHE	netflow9.c	150;"	d	file:
NF9_OPTION_SCOPE_INTERFACE	netflow9.c	148;"	d	file:
NF9_OPTION_SCOPE_LINECARD	netflow9.c	149;"	d	file:
NF9_OPTION_SCOPE_SYSTEM	netflow9.c	147;"	d	file:
NF9_OPTION_SCOPE_TEMPLATE	netflow9.c	151;"	d	file:
NF9_OPTION_TEMPLATE_FLOWSET_HEADER	netflow9.c	/^struct NF9_OPTION_TEMPLATE_FLOWSET_HEADER {$/;"	s	file:
NF9_PROTOCOL	netflow9.c	61;"	d	file:
NF9_SAMPLING_ALGORITHM	netflow9.c	83;"	d	file:
NF9_SAMPLING_ALGORITHM_DETERMINISTIC	netflow9.c	153;"	d	file:
NF9_SAMPLING_ALGORITHM_RANDOM	netflow9.c	154;"	d	file:
NF9_SAMPLING_INTERVAL	netflow9.c	82;"	d	file:
NF9_SOFTFLOWD_DATA_COMMON	netflow9.c	/^struct NF9_SOFTFLOWD_DATA_COMMON {$/;"	s	file:
NF9_SOFTFLOWD_DATA_V4	netflow9.c	/^struct NF9_SOFTFLOWD_DATA_V4 {$/;"	s	file:
NF9_SOFTFLOWD_DATA_V6	netflow9.c	/^struct NF9_SOFTFLOWD_DATA_V6 {$/;"	s	file:
NF9_SOFTFLOWD_MAX_PACKET_SIZE	netflow9.c	139;"	d	file:
NF9_SOFTFLOWD_OPTION_DATA	netflow9.c	/^struct NF9_SOFTFLOWD_OPTION_DATA {$/;"	s	file:
NF9_SOFTFLOWD_OPTION_TEMPLATE	netflow9.c	/^struct NF9_SOFTFLOWD_OPTION_TEMPLATE {$/;"	s	file:
NF9_SOFTFLOWD_OPTION_TEMPLATE_ID	netflow9.c	142;"	d	file:
NF9_SOFTFLOWD_OPTION_TEMPLATE_NRECORDS	netflow9.c	101;"	d	file:
NF9_SOFTFLOWD_OPTION_TEMPLATE_SCOPE_RECORDS	netflow9.c	100;"	d	file:
NF9_SOFTFLOWD_TEMPLATE	netflow9.c	/^struct NF9_SOFTFLOWD_TEMPLATE {$/;"	s	file:
NF9_SOFTFLOWD_TEMPLATE_NRECORDS	netflow9.c	91;"	d	file:
NF9_SOFTFLOWD_TEMPLATE_NRECORDS	netflow9.c	93;"	d	file:
NF9_SOFTFLOWD_V4_TEMPLATE_ID	netflow9.c	140;"	d	file:
NF9_SOFTFLOWD_V6_TEMPLATE_ID	netflow9.c	141;"	d	file:
NF9_SRC_VLAN	netflow9.c	85;"	d	file:
NF9_TCP_FLAGS	netflow9.c	64;"	d	file:
NF9_TEMPLATE_FLOWSET_HEADER	netflow9.c	/^struct NF9_TEMPLATE_FLOWSET_HEADER {$/;"	s	file:
NF9_TEMPLATE_FLOWSET_ID	netflow9.c	53;"	d	file:
NF9_TEMPLATE_FLOWSET_RECORD	netflow9.c	/^struct NF9_TEMPLATE_FLOWSET_RECORD {$/;"	s	file:
NF9_TOS	netflow9.c	62;"	d	file:
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_DATA_FLOWSET_HEADER
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_FLOWSET_HEADER_COMMON
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_HEADER
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_OPTION_TEMPLATE_FLOWSET_HEADER
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_SOFTFLOWD_DATA_COMMON
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_SOFTFLOWD_DATA_V4
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_SOFTFLOWD_DATA_V6
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_SOFTFLOWD_OPTION_DATA
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_SOFTFLOWD_OPTION_TEMPLATE
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_SOFTFLOWD_TEMPLATE
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_TEMPLATE_FLOWSET_HEADER
__packed	netflow9.c	/^} __packed;$/;"	v	typeref:struct:NF9_TEMPLATE_FLOWSET_RECORD
bytes	netflow9.c	/^	u_int32_t bytes, packets;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
c	netflow9.c	/^	struct NF9_FLOWSET_HEADER_COMMON c;	$/;"	m	struct:NF9_SOFTFLOWD_OPTION_DATA	typeref:struct:NF9_SOFTFLOWD_OPTION_DATA::NF9_FLOWSET_HEADER_COMMON	file:
c	netflow9.c	/^	struct NF9_FLOWSET_HEADER_COMMON c;$/;"	m	struct:NF9_DATA_FLOWSET_HEADER	typeref:struct:NF9_DATA_FLOWSET_HEADER::NF9_FLOWSET_HEADER_COMMON	file:
c	netflow9.c	/^	struct NF9_FLOWSET_HEADER_COMMON c;$/;"	m	struct:NF9_OPTION_TEMPLATE_FLOWSET_HEADER	typeref:struct:NF9_OPTION_TEMPLATE_FLOWSET_HEADER::NF9_FLOWSET_HEADER_COMMON	file:
c	netflow9.c	/^	struct NF9_FLOWSET_HEADER_COMMON c;$/;"	m	struct:NF9_TEMPLATE_FLOWSET_HEADER	typeref:struct:NF9_TEMPLATE_FLOWSET_HEADER::NF9_FLOWSET_HEADER_COMMON	file:
c	netflow9.c	/^	struct NF9_SOFTFLOWD_DATA_COMMON c;$/;"	m	struct:NF9_SOFTFLOWD_DATA_V4	typeref:struct:NF9_SOFTFLOWD_DATA_V4::NF9_SOFTFLOWD_DATA_COMMON	file:
c	netflow9.c	/^	struct NF9_SOFTFLOWD_DATA_COMMON c;$/;"	m	struct:NF9_SOFTFLOWD_DATA_V6	typeref:struct:NF9_SOFTFLOWD_DATA_V6::NF9_SOFTFLOWD_DATA_COMMON	file:
count	netflow9.c	/^	u_int16_t template_id, count;$/;"	m	struct:NF9_TEMPLATE_FLOWSET_HEADER	file:
dst_addr	netflow9.c	/^	u_int32_t src_addr, dst_addr;$/;"	m	struct:NF9_SOFTFLOWD_DATA_V4	file:
dst_addr	netflow9.c	/^	u_int8_t src_addr[16], dst_addr[16];$/;"	m	struct:NF9_SOFTFLOWD_DATA_V6	file:
dst_port	netflow9.c	/^	u_int16_t src_port, dst_port;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
first_switched	netflow9.c	/^	u_int32_t last_switched, first_switched;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
flows	netflow9.c	/^	u_int16_t version, flows;$/;"	m	struct:NF9_HEADER	file:
flowset_id	netflow9.c	/^	u_int16_t flowset_id, length;$/;"	m	struct:NF9_FLOWSET_HEADER_COMMON	file:
h	netflow9.c	/^	struct NF9_OPTION_TEMPLATE_FLOWSET_HEADER h;$/;"	m	struct:NF9_SOFTFLOWD_OPTION_TEMPLATE	typeref:struct:NF9_SOFTFLOWD_OPTION_TEMPLATE::NF9_OPTION_TEMPLATE_FLOWSET_HEADER	file:
h	netflow9.c	/^	struct NF9_TEMPLATE_FLOWSET_HEADER h;$/;"	m	struct:NF9_SOFTFLOWD_TEMPLATE	typeref:struct:NF9_SOFTFLOWD_TEMPLATE::NF9_TEMPLATE_FLOWSET_HEADER	file:
icmp_type	netflow9.c	/^	u_int16_t icmp_type, vlanid;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
if_index_in	netflow9.c	/^	u_int32_t if_index_in, if_index_out;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
if_index_out	netflow9.c	/^	u_int32_t if_index_in, if_index_out;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
ipproto	netflow9.c	/^	u_int8_t protocol, tcp_flags, ipproto, tos;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
last_switched	netflow9.c	/^	u_int32_t last_switched, first_switched;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
length	netflow9.c	/^	u_int16_t flowset_id, length;$/;"	m	struct:NF9_FLOWSET_HEADER_COMMON	file:
length	netflow9.c	/^	u_int16_t type, length;$/;"	m	struct:NF9_TEMPLATE_FLOWSET_RECORD	file:
netflow9_resend_template	netflow9.c	/^netflow9_resend_template(void)$/;"	f
nf9_init_option	netflow9.c	/^nf9_init_option(u_int16_t ifidx, struct OPTION *option) {$/;"	f	file:
nf9_init_template	netflow9.c	/^nf9_init_template(void)$/;"	f	file:
nf9_pkts_until_template	netflow9.c	/^static int nf9_pkts_until_template = -1;$/;"	v	file:
nf_flow_to_flowset	netflow9.c	/^nf_flow_to_flowset(const struct FLOW *flow, u_char *packet, u_int len,$/;"	f	file:
option_data	netflow9.c	/^static struct NF9_SOFTFLOWD_OPTION_DATA option_data;$/;"	v	typeref:struct:NF9_SOFTFLOWD_OPTION_DATA	file:
option_length	netflow9.c	/^	u_int16_t template_id, scope_length, option_length;$/;"	m	struct:NF9_OPTION_TEMPLATE_FLOWSET_HEADER	file:
option_template	netflow9.c	/^static struct NF9_SOFTFLOWD_OPTION_TEMPLATE option_template;$/;"	v	typeref:struct:NF9_SOFTFLOWD_OPTION_TEMPLATE	file:
package_sequence	netflow9.c	/^	u_int32_t package_sequence, source_id;$/;"	m	struct:NF9_HEADER	file:
packets	netflow9.c	/^	u_int32_t bytes, packets;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
padding	netflow9.c	/^	u_int8_t padding[3];$/;"	m	struct:NF9_SOFTFLOWD_OPTION_DATA	file:
protocol	netflow9.c	/^	u_int8_t protocol, tcp_flags, ipproto, tos;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
r	netflow9.c	/^	struct NF9_TEMPLATE_FLOWSET_RECORD r[NF9_SOFTFLOWD_OPTION_TEMPLATE_NRECORDS];$/;"	m	struct:NF9_SOFTFLOWD_OPTION_TEMPLATE	typeref:struct:NF9_SOFTFLOWD_OPTION_TEMPLATE::NF9_TEMPLATE_FLOWSET_RECORD	file:
r	netflow9.c	/^	struct NF9_TEMPLATE_FLOWSET_RECORD r[NF9_SOFTFLOWD_TEMPLATE_NRECORDS];$/;"	m	struct:NF9_SOFTFLOWD_TEMPLATE	typeref:struct:NF9_SOFTFLOWD_TEMPLATE::NF9_TEMPLATE_FLOWSET_RECORD	file:
s	netflow9.c	/^	struct NF9_TEMPLATE_FLOWSET_RECORD s[NF9_SOFTFLOWD_OPTION_TEMPLATE_SCOPE_RECORDS];$/;"	m	struct:NF9_SOFTFLOWD_OPTION_TEMPLATE	typeref:struct:NF9_SOFTFLOWD_OPTION_TEMPLATE::NF9_TEMPLATE_FLOWSET_RECORD	file:
sampling_algorithm	netflow9.c	/^	u_int8_t sampling_algorithm;$/;"	m	struct:NF9_SOFTFLOWD_OPTION_DATA	file:
sampling_interval	netflow9.c	/^	u_int32_t sampling_interval;$/;"	m	struct:NF9_SOFTFLOWD_OPTION_DATA	file:
scope_ifidx	netflow9.c	/^	u_int32_t scope_ifidx;$/;"	m	struct:NF9_SOFTFLOWD_OPTION_DATA	file:
scope_length	netflow9.c	/^	u_int16_t template_id, scope_length, option_length;$/;"	m	struct:NF9_OPTION_TEMPLATE_FLOWSET_HEADER	file:
send_netflow_v9	netflow9.c	/^send_netflow_v9(struct FLOW **flows, int num_flows, int nfsock,$/;"	f
source_id	netflow9.c	/^	u_int32_t package_sequence, source_id;$/;"	m	struct:NF9_HEADER	file:
src_addr	netflow9.c	/^	u_int32_t src_addr, dst_addr;$/;"	m	struct:NF9_SOFTFLOWD_DATA_V4	file:
src_addr	netflow9.c	/^	u_int8_t src_addr[16], dst_addr[16];$/;"	m	struct:NF9_SOFTFLOWD_DATA_V6	file:
src_port	netflow9.c	/^	u_int16_t src_port, dst_port;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
tcp_flags	netflow9.c	/^	u_int8_t protocol, tcp_flags, ipproto, tos;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
template_id	netflow9.c	/^	u_int16_t template_id, count;$/;"	m	struct:NF9_TEMPLATE_FLOWSET_HEADER	file:
template_id	netflow9.c	/^	u_int16_t template_id, scope_length, option_length;$/;"	m	struct:NF9_OPTION_TEMPLATE_FLOWSET_HEADER	file:
time_sec	netflow9.c	/^	u_int32_t uptime_ms, time_sec;$/;"	m	struct:NF9_HEADER	file:
tos	netflow9.c	/^	u_int8_t protocol, tcp_flags, ipproto, tos;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
type	netflow9.c	/^	u_int16_t type, length;$/;"	m	struct:NF9_TEMPLATE_FLOWSET_RECORD	file:
uptime_ms	netflow9.c	/^	u_int32_t uptime_ms, time_sec;$/;"	m	struct:NF9_HEADER	file:
v4_template	netflow9.c	/^static struct NF9_SOFTFLOWD_TEMPLATE v4_template;$/;"	v	typeref:struct:NF9_SOFTFLOWD_TEMPLATE	file:
v6_template	netflow9.c	/^static struct NF9_SOFTFLOWD_TEMPLATE v6_template;$/;"	v	typeref:struct:NF9_SOFTFLOWD_TEMPLATE	file:
version	netflow9.c	/^	u_int16_t version, flows;$/;"	m	struct:NF9_HEADER	file:
vlanid	netflow9.c	/^	u_int16_t icmp_type, vlanid;$/;"	m	struct:NF9_SOFTFLOWD_DATA_COMMON	file:
main	softflowctl.c	/^main(int argc, char **argv)$/;"	f
usage	softflowctl.c	/^usage(void)$/;"	f	file:
CB_CTXT	softflowd.c	/^struct CB_CTXT {$/;"	s	file:
CE_EXPIRE_ALL	softflowd.c	784;"	d	file:
CE_EXPIRE_FORCED	softflowd.c	785;"	d	file:
CE_EXPIRE_NORMAL	softflowd.c	783;"	d	file:
DATALINK	softflowd.c	/^struct DATALINK {$/;"	s	file:
NETFLOW_SENDER	softflowd.c	/^struct NETFLOW_SENDER {$/;"	s	file:
NETFLOW_TARGET	softflowd.c	/^struct NETFLOW_TARGET {$/;"	s	file:
PP_BAD_PACKET	softflowd.c	542;"	d	file:
PP_MALLOC_FAIL	softflowd.c	543;"	d	file:
PP_OK	softflowd.c	541;"	d	file:
accept_control	softflowd.c	/^accept_control(int lsock, struct NETFLOW_TARGET *target, struct FLOWTRACK *ft,$/;"	f	file:
argv_join	softflowd.c	/^argv_join(int argc, char **argv)$/;"	f	file:
bidir_func	softflowd.c	/^	netflow_send_func_t *bidir_func;$/;"	m	struct:NETFLOW_SENDER	file:
check_expired	softflowd.c	/^check_expired(struct FLOWTRACK *ft, struct NETFLOW_TARGET *target, int ex)$/;"	f	file:
connsock	softflowd.c	/^connsock(struct sockaddr_storage *addr, socklen_t len, int hoplimit, int protocol)$/;"	f	file:
datalink_check	softflowd.c	/^datalink_check(int linktype, const u_int8_t *pkt, u_int32_t caplen, int *af, u_int16_t *vlanid)$/;"	f	file:
delete_all_flows	softflowd.c	/^delete_all_flows(struct FLOWTRACK *ft)$/;"	f	file:
dialect	softflowd.c	/^	const struct NETFLOW_SENDER *dialect;$/;"	m	struct:NETFLOW_TARGET	typeref:struct:NETFLOW_TARGET::NETFLOW_SENDER	file:
dlt	softflowd.c	/^	int dlt;		\/* BPF datalink type *\/$/;"	m	struct:DATALINK	file:
drop_privs	softflowd.c	/^drop_privs(void)$/;"	f	file:
dump_flows	softflowd.c	/^dump_flows(struct FLOWTRACK *ft, FILE *out)$/;"	f	file:
expiry_compare	softflowd.c	/^expiry_compare(struct EXPIRY *a, struct EXPIRY *b)$/;"	f	file:
expiry_get	softflowd.c	/^expiry_get(struct FLOWTRACK *ft)$/;"	f	file:
expiry_put	softflowd.c	/^expiry_put(struct FLOWTRACK *ft, struct EXPIRY *expiry)$/;"	f	file:
fatal	softflowd.c	/^	int fatal;$/;"	m	struct:CB_CTXT	file:
fd	softflowd.c	/^	int fd;$/;"	m	struct:NETFLOW_TARGET	file:
flow_cb	softflowd.c	/^flow_cb(u_char *user_data, const struct pcap_pkthdr* phdr, $/;"	f	file:
flow_compare	softflowd.c	/^flow_compare(struct FLOW *a, struct FLOW *b)$/;"	f	file:
flow_get	softflowd.c	/^flow_get(struct FLOWTRACK *ft)$/;"	f	file:
flow_put	softflowd.c	/^flow_put(struct FLOWTRACK *ft, struct FLOW *flow)$/;"	f	file:
flow_update_expiry	softflowd.c	/^flow_update_expiry(struct FLOWTRACK *ft, struct FLOW *flow)$/;"	f	file:
force_expire	softflowd.c	/^force_expire(struct FLOWTRACK *ft, u_int32_t num_to_expire)$/;"	f	file:
format_flow	softflowd.c	/^format_flow(struct FLOW *flow)$/;"	f	file:
format_flow_brief	softflowd.c	/^format_flow_brief(struct FLOW *flow)$/;"	f	file:
format_time	softflowd.c	/^format_time(time_t t)$/;"	f	file:
ft	softflowd.c	/^	struct FLOWTRACK *ft;$/;"	m	struct:CB_CTXT	typeref:struct:CB_CTXT::FLOWTRACK	file:
ft_is_be	softflowd.c	/^	int ft_is_be;		\/* Set if frametype is big-endian *\/$/;"	m	struct:DATALINK	file:
ft_len	softflowd.c	/^	int ft_len;		\/* Datalink frametype length *\/$/;"	m	struct:DATALINK	file:
ft_mask	softflowd.c	/^	u_int32_t ft_mask;	\/* Mask applied to frametype *\/$/;"	m	struct:DATALINK	file:
ft_off	softflowd.c	/^	int ft_off;		\/* Datalink frametype offset *\/$/;"	m	struct:DATALINK	file:
ft_v4	softflowd.c	/^	u_int32_t ft_v4;	\/* IPv4 frametype *\/$/;"	m	struct:DATALINK	file:
ft_v6	softflowd.c	/^	u_int32_t ft_v6;	\/* IPv6 frametype *\/$/;"	m	struct:DATALINK	file:
func	softflowd.c	/^	netflow_send_func_t *func;$/;"	m	struct:NETFLOW_SENDER	file:
graceful_shutdown_request	softflowd.c	/^static volatile sig_atomic_t graceful_shutdown_request = 0;	$/;"	v	file:
if_index	softflowd.c	/^static u_int16_t if_index = 0;		\/* "manual" interface index *\/$/;"	v	file:
init_flowtrack	softflowd.c	/^init_flowtrack(struct FLOWTRACK *ft)$/;"	f	file:
ipv4_to_flowrec	softflowd.c	/^ipv4_to_flowrec(struct FLOW *flow, const u_int8_t *pkt, size_t caplen, $/;"	f	file:
ipv6_to_flowrec	softflowd.c	/^ipv6_to_flowrec(struct FLOW *flow, const u_int8_t *pkt, size_t caplen, $/;"	f	file:
linktype	softflowd.c	/^	int linktype;$/;"	m	struct:CB_CTXT	file:
lt	softflowd.c	/^static const struct DATALINK lt[] = {$/;"	v	typeref:struct:DATALINK	file:
main	softflowd.c	/^main(int argc, char **argv)$/;"	f
netflow_send_func_t	softflowd.c	/^typedef int (netflow_send_func_t)(struct FLOW **, int, int, u_int16_t,$/;"	t	file:
next_expire	softflowd.c	/^next_expire(struct FLOWTRACK *ft)$/;"	f	file:
nf	softflowd.c	/^static const struct NETFLOW_SENDER nf[] = {$/;"	v	typeref:struct:NETFLOW_SENDER	file:
parse_hostport	softflowd.c	/^parse_hostport(const char *s, struct sockaddr *addr, socklen_t *len)$/;"	f	file:
print_timeouts	softflowd.c	/^print_timeouts(struct FLOWTRACK *ft, FILE *out)$/;"	f	file:
process_packet	softflowd.c	/^process_packet(struct FLOWTRACK *ft, const u_int8_t *pkt, int af,$/;"	f	file:
set_timeout	softflowd.c	/^set_timeout(struct FLOWTRACK *ft, const char *to_spec)$/;"	f	file:
setup_packet_capture	softflowd.c	/^setup_packet_capture(struct pcap **pcap, int *linktype, $/;"	f	file:
sighand_graceful_shutdown	softflowd.c	/^static void sighand_graceful_shutdown(int signum)$/;"	f	file:
sighand_other	softflowd.c	/^static void sighand_other(int signum)$/;"	f	file:
skiplen	softflowd.c	/^	int skiplen;		\/* Number of bytes to skip datalink header *\/$/;"	m	struct:DATALINK	file:
statistics	softflowd.c	/^statistics(struct FLOWTRACK *ft, FILE *out, pcap_t *pcap)$/;"	f	file:
timeval_sub_ms	softflowd.c	/^timeval_sub_ms(const struct timeval *t1, const struct timeval *t2)$/;"	f
transport_to_flowrec	softflowd.c	/^transport_to_flowrec(struct FLOW *flow, const u_int8_t *pkt, $/;"	f	file:
unix_listener	softflowd.c	/^unix_listener(const char *path)$/;"	f	file:
update_expiry_stats	softflowd.c	/^update_expiry_stats(struct FLOWTRACK *ft, struct EXPIRY *e)$/;"	f	file:
update_statistic	softflowd.c	/^update_statistic(struct STATISTIC *s, double new, double n)$/;"	f	file:
update_statistics	softflowd.c	/^update_statistics(struct FLOWTRACK *ft, struct FLOW *flow)$/;"	f	file:
usage	softflowd.c	/^usage(void)$/;"	f	file:
v6_capable	softflowd.c	/^	int v6_capable;$/;"	m	struct:NETFLOW_SENDER	file:
verbose_flag	softflowd.c	/^static int verbose_flag = 0;		\/* Debugging flag *\/$/;"	v	file:
version	softflowd.c	/^	int version;$/;"	m	struct:NETFLOW_SENDER	file:
want_v6	softflowd.c	/^	int want_v6;$/;"	m	struct:CB_CTXT	file:
DEFAULT_EXPIRY_INTERVAL	softflowd.h	58;"	d
DEFAULT_GENERAL_TIMEOUT	softflowd.h	56;"	d
DEFAULT_ICMP_TIMEOUT	softflowd.h	55;"	d
DEFAULT_MAXIMUM_LIFETIME	softflowd.h	57;"	d
DEFAULT_MAX_FLOWS	softflowd.h	64;"	d
DEFAULT_TCP_FIN_TIMEOUT	softflowd.h	53;"	d
DEFAULT_TCP_RST_TIMEOUT	softflowd.h	52;"	d
DEFAULT_TCP_TIMEOUT	softflowd.h	51;"	d
DEFAULT_UDP_TIMEOUT	softflowd.h	54;"	d
EXPIRY	softflowd.h	/^struct EXPIRY {$/;"	s
FLOW	softflowd.h	/^struct FLOW {$/;"	s
FLOWTRACK	softflowd.h	/^struct FLOWTRACK {$/;"	s
FLOWTRACKPARAMETERS	softflowd.h	/^struct FLOWTRACKPARAMETERS {$/;"	s
LIBPCAP_SNAPLEN_V4	softflowd.h	45;"	d
LIBPCAP_SNAPLEN_V6	softflowd.h	46;"	d
OPTION	softflowd.h	/^struct OPTION {$/;"	s
PRIVDROP_CHROOT_DIR	softflowd.h	39;"	d
PRIVDROP_USER	softflowd.h	35;"	d
R_FLUSH	softflowd.h	/^		R_MAXLIFE, R_OVERBYTES, R_OVERFLOWS, R_FLUSH$/;"	e	enum:EXPIRY::__anon4
R_GENERAL	softflowd.h	/^		R_GENERAL, R_TCP, R_TCP_RST, R_TCP_FIN, R_UDP, R_ICMP, $/;"	e	enum:EXPIRY::__anon4
R_ICMP	softflowd.h	/^		R_GENERAL, R_TCP, R_TCP_RST, R_TCP_FIN, R_UDP, R_ICMP, $/;"	e	enum:EXPIRY::__anon4
R_MAXLIFE	softflowd.h	/^		R_MAXLIFE, R_OVERBYTES, R_OVERFLOWS, R_FLUSH$/;"	e	enum:EXPIRY::__anon4
R_OVERBYTES	softflowd.h	/^		R_MAXLIFE, R_OVERBYTES, R_OVERFLOWS, R_FLUSH$/;"	e	enum:EXPIRY::__anon4
R_OVERFLOWS	softflowd.h	/^		R_MAXLIFE, R_OVERBYTES, R_OVERFLOWS, R_FLUSH$/;"	e	enum:EXPIRY::__anon4
R_TCP	softflowd.h	/^		R_GENERAL, R_TCP, R_TCP_RST, R_TCP_FIN, R_UDP, R_ICMP, $/;"	e	enum:EXPIRY::__anon4
R_TCP_FIN	softflowd.h	/^		R_GENERAL, R_TCP, R_TCP_RST, R_TCP_FIN, R_UDP, R_ICMP, $/;"	e	enum:EXPIRY::__anon4
R_TCP_RST	softflowd.h	/^		R_GENERAL, R_TCP, R_TCP_RST, R_TCP_FIN, R_UDP, R_ICMP, $/;"	e	enum:EXPIRY::__anon4
R_UDP	softflowd.h	/^		R_GENERAL, R_TCP, R_TCP_RST, R_TCP_FIN, R_UDP, R_ICMP, $/;"	e	enum:EXPIRY::__anon4
STATISTIC	softflowd.h	/^struct STATISTIC {$/;"	s
TRACK_FULL	softflowd.h	72;"	d
TRACK_FULL_VLAN	softflowd.h	76;"	d
TRACK_IP_ONLY	softflowd.h	75;"	d
TRACK_IP_PROTO	softflowd.h	74;"	d
TRACK_IP_PROTO_PORT	softflowd.h	73;"	d
_SOFTFLOWD_H	softflowd.h	26;"	d
addr	softflowd.h	/^	} addr[2];				\/* Endpoint addresses *\/$/;"	m	struct:FLOW	typeref:union:FLOW::__anon3
af	softflowd.h	/^	int af;					\/* Address family of flow *\/$/;"	m	struct:FLOW
bad_packets	softflowd.h	/^	u_int64_t bad_packets;			\/* # of bad packets *\/$/;"	m	struct:FLOWTRACKPARAMETERS
bidirection	softflowd.h	/^	u_int8_t bidirection;$/;"	m	struct:FLOWTRACKPARAMETERS
duration	softflowd.h	/^	struct STATISTIC duration;		\/* Flow duration *\/$/;"	m	struct:FLOWTRACKPARAMETERS	typeref:struct:FLOWTRACKPARAMETERS::STATISTIC
duration_pp	softflowd.h	/^	struct STATISTIC duration_pp[256];$/;"	m	struct:FLOWTRACKPARAMETERS	typeref:struct:FLOWTRACKPARAMETERS::STATISTIC
expired_flush	softflowd.h	/^	u_int64_t expired_flush;$/;"	m	struct:FLOWTRACKPARAMETERS
expired_general	softflowd.h	/^	u_int64_t expired_general;$/;"	m	struct:FLOWTRACKPARAMETERS
expired_icmp	softflowd.h	/^	u_int64_t expired_icmp;$/;"	m	struct:FLOWTRACKPARAMETERS
expired_maxflows	softflowd.h	/^	u_int64_t expired_maxflows;$/;"	m	struct:FLOWTRACKPARAMETERS
expired_maxlife	softflowd.h	/^	u_int64_t expired_maxlife;$/;"	m	struct:FLOWTRACKPARAMETERS
expired_overbytes	softflowd.h	/^	u_int64_t expired_overbytes;$/;"	m	struct:FLOWTRACKPARAMETERS
expired_tcp	softflowd.h	/^	u_int64_t expired_tcp;$/;"	m	struct:FLOWTRACKPARAMETERS
expired_tcp_fin	softflowd.h	/^	u_int64_t expired_tcp_fin;$/;"	m	struct:FLOWTRACKPARAMETERS
expired_tcp_rst	softflowd.h	/^	u_int64_t expired_tcp_rst;$/;"	m	struct:FLOWTRACKPARAMETERS
expired_udp	softflowd.h	/^	u_int64_t expired_udp;$/;"	m	struct:FLOWTRACKPARAMETERS
expires_at	softflowd.h	/^	u_int32_t expires_at;			\/* time_t *\/$/;"	m	struct:EXPIRY
expiries	softflowd.h	/^	EXPIRY_HEAD(EXPIRIES, EXPIRY) expiries;	\/* Top of expiries tree *\/$/;"	m	struct:FLOWTRACK
expiry	softflowd.h	/^	struct EXPIRY *expiry;			\/* Pointer to expiry record *\/$/;"	m	struct:FLOW	typeref:struct:FLOW::EXPIRY
expiry_freelist	softflowd.h	/^	struct freelist expiry_freelist;	\/* Freelist for expiry events *\/$/;"	m	struct:FLOWTRACK	typeref:struct:FLOWTRACK::freelist
expiry_interval	softflowd.h	/^	int expiry_interval;			\/* Interval between expiries *\/ $/;"	m	struct:FLOWTRACKPARAMETERS
flow	softflowd.h	/^	struct FLOW *flow;			\/* pointer to flow *\/$/;"	m	struct:EXPIRY	typeref:struct:EXPIRY::FLOW
flow_freelist	softflowd.h	/^	struct freelist flow_freelist;		\/* Freelist for flows *\/$/;"	m	struct:FLOWTRACK	typeref:struct:FLOWTRACK::freelist
flow_last	softflowd.h	/^	struct timeval flow_last;		\/* Time of last traffic *\/$/;"	m	struct:FLOW	typeref:struct:FLOW::timeval
flow_seq	softflowd.h	/^	u_int64_t flow_seq;			\/* Flow ID *\/$/;"	m	struct:FLOW
flow_start	softflowd.h	/^	struct timeval flow_start;		\/* Time of creation *\/$/;"	m	struct:FLOW	typeref:struct:FLOW::timeval
flows	softflowd.h	/^	FLOW_HEAD(FLOWS, FLOW) flows;		\/* Top of flow tree *\/$/;"	m	struct:FLOWTRACK
flows_dropped	softflowd.h	/^	u_int64_t flows_dropped;		\/* # of flows dropped *\/$/;"	m	struct:FLOWTRACKPARAMETERS
flows_expired	softflowd.h	/^	u_int64_t flows_expired;		\/* # expired *\/$/;"	m	struct:FLOWTRACKPARAMETERS
flows_exported	softflowd.h	/^	u_int64_t flows_exported;		\/* # of flows sent *\/$/;"	m	struct:FLOWTRACKPARAMETERS
flows_force_expired	softflowd.h	/^	u_int64_t flows_force_expired;		\/* # of flows forced out *\/$/;"	m	struct:FLOWTRACKPARAMETERS
flows_pp	softflowd.h	/^	u_int64_t flows_pp[256];$/;"	m	struct:FLOWTRACKPARAMETERS
frag_packets	softflowd.h	/^	u_int64_t frag_packets;			\/* # of fragmented packets *\/$/;"	m	struct:FLOWTRACKPARAMETERS
general_timeout	softflowd.h	/^	int general_timeout;			\/* Everything else *\/$/;"	m	struct:FLOWTRACKPARAMETERS
icmp_timeout	softflowd.h	/^	int icmp_timeout;			\/* ICMP flows *\/$/;"	m	struct:FLOWTRACKPARAMETERS
ip6_flowlabel	softflowd.h	/^	u_int32_t ip6_flowlabel[2];		\/* IPv6 Flowlabel *\/$/;"	m	struct:FLOW
max	softflowd.h	/^	double min, mean, max;$/;"	m	struct:STATISTIC
max_flows	softflowd.h	/^	unsigned int max_flows;			\/* Max # of active flows *\/$/;"	m	struct:FLOWTRACKPARAMETERS
maximum_lifetime	softflowd.h	/^	int maximum_lifetime;			\/* Maximum life for flows *\/$/;"	m	struct:FLOWTRACKPARAMETERS
mean	softflowd.h	/^	double min, mean, max;$/;"	m	struct:STATISTIC
meteringProcessId	softflowd.h	/^	pid_t meteringProcessId;$/;"	m	struct:OPTION
min	softflowd.h	/^	double min, mean, max;$/;"	m	struct:STATISTIC
next_flow_seq	softflowd.h	/^	u_int64_t next_flow_seq;		\/* Next flow ID *\/$/;"	m	struct:FLOWTRACKPARAMETERS
non_ip_packets	softflowd.h	/^	u_int64_t non_ip_packets;		\/* # of not-IP packets *\/$/;"	m	struct:FLOWTRACKPARAMETERS
non_sampled_packets	softflowd.h	/^	u_int64_t non_sampled_packets;		\/* # of not sampled packets *\/$/;"	m	struct:FLOWTRACKPARAMETERS
num_flows	softflowd.h	/^	unsigned int num_flows;			\/* # of active flows *\/$/;"	m	struct:FLOWTRACKPARAMETERS
octets	softflowd.h	/^	struct STATISTIC octets;		\/* Bytes (bidir) *\/$/;"	m	struct:FLOWTRACKPARAMETERS	typeref:struct:FLOWTRACKPARAMETERS::STATISTIC
octets	softflowd.h	/^	u_int32_t octets[2];			\/* Octets so far *\/$/;"	m	struct:FLOW
octets_pp	softflowd.h	/^	u_int64_t octets_pp[256];$/;"	m	struct:FLOWTRACKPARAMETERS
option	softflowd.h	/^	struct OPTION option;$/;"	m	struct:FLOWTRACKPARAMETERS	typeref:struct:FLOWTRACKPARAMETERS::OPTION
packets	softflowd.h	/^	struct STATISTIC packets;		\/* Packets (bidir) *\/$/;"	m	struct:FLOWTRACKPARAMETERS	typeref:struct:FLOWTRACKPARAMETERS::STATISTIC
packets	softflowd.h	/^	u_int32_t packets[2];			\/* Packets so far *\/$/;"	m	struct:FLOW
packets_pp	softflowd.h	/^	u_int64_t packets_pp[256];$/;"	m	struct:FLOWTRACKPARAMETERS
packets_sent	softflowd.h	/^	u_int64_t packets_sent;			\/* # netflow packets sent *\/$/;"	m	struct:FLOWTRACKPARAMETERS
param	softflowd.h	/^	struct FLOWTRACKPARAMETERS param;$/;"	m	struct:FLOWTRACK	typeref:struct:FLOWTRACK::FLOWTRACKPARAMETERS
port	softflowd.h	/^	u_int16_t port[2];			\/* Endpoint ports *\/$/;"	m	struct:FLOW
protocol	softflowd.h	/^	u_int8_t protocol;			\/* Protocol *\/$/;"	m	struct:FLOW
reason	softflowd.h	/^	} reason;$/;"	m	struct:EXPIRY	typeref:enum:EXPIRY::__anon4
records_sent	softflowd.h	/^	u_int64_t records_sent;			\/* # netflow records sent *\/$/;"	m	struct:FLOWTRACKPARAMETERS
sample	softflowd.h	/^	uint32_t sample;$/;"	m	struct:OPTION
system_boot_time	softflowd.h	/^	struct timeval system_boot_time;	\/* SysUptime *\/$/;"	m	struct:FLOWTRACKPARAMETERS	typeref:struct:FLOWTRACKPARAMETERS::timeval
tcp_fin_timeout	softflowd.h	/^	int tcp_fin_timeout;			\/* TCP flows after bidi FIN *\/$/;"	m	struct:FLOWTRACKPARAMETERS
tcp_flags	softflowd.h	/^	u_int8_t tcp_flags[2];			\/* Cumulative OR of flags *\/$/;"	m	struct:FLOW
tcp_rst_timeout	softflowd.h	/^	int tcp_rst_timeout;			\/* TCP flows after RST *\/$/;"	m	struct:FLOWTRACKPARAMETERS
tcp_timeout	softflowd.h	/^	int tcp_timeout;			\/* Open TCP connections *\/$/;"	m	struct:FLOWTRACKPARAMETERS
time_format	softflowd.h	/^	char time_format;$/;"	m	struct:FLOWTRACKPARAMETERS
tos	softflowd.h	/^	u_int8_t tos[2];			\/* Tos *\/$/;"	m	struct:FLOW
total_packets	softflowd.h	/^	u_int64_t total_packets;		\/* # of good packets *\/$/;"	m	struct:FLOWTRACKPARAMETERS
track_level	softflowd.h	/^	int track_level;			\/* See TRACK_* above *\/$/;"	m	struct:FLOWTRACKPARAMETERS
trp	softflowd.h	/^	EXPIRY_ENTRY(EXPIRY) trp;		\/* Tree pointer *\/$/;"	m	struct:EXPIRY
trp	softflowd.h	/^	FLOW_ENTRY(FLOW) trp;			\/* Tree pointer *\/$/;"	m	struct:FLOW
udp_timeout	softflowd.h	/^	int udp_timeout;			\/* UDP flows *\/$/;"	m	struct:FLOWTRACKPARAMETERS
v4	softflowd.h	/^		struct in_addr v4;$/;"	m	union:FLOW::__anon3	typeref:struct:FLOW::__anon3::in_addr
v6	softflowd.h	/^		struct in6_addr v6;$/;"	m	union:FLOW::__anon3	typeref:struct:FLOW::__anon3::in6_addr
vlanid	softflowd.h	/^        u_int16_t vlanid;                       \/* vlanid *\/$/;"	m	struct:FLOW
rcsid	strlcat.c	/^static char *rcsid = "$OpenBSD: strlcat.c,v 1.11 2003\/06\/17 21:56:24 millert Exp $";$/;"	v	file:
strlcat	strlcat.c	/^strlcat(char *dst, const char *src, size_t siz)$/;"	f
rcsid	strlcpy.c	/^static char *rcsid = "$OpenBSD: strlcpy.c,v 1.8 2003\/06\/17 21:56:24 millert Exp $";$/;"	v	file:
strlcpy	strlcpy.c	/^strlcpy(char *dst, const char *src, size_t siz)$/;"	f
RB_AUGMENT	sys-tree.h	332;"	d
RB_BLACK	sys-tree.h	303;"	d
RB_COLOR	sys-tree.h	316;"	d
RB_EMPTY	sys-tree.h	318;"	d
RB_ENTRY	sys-tree.h	305;"	d
RB_FIND	sys-tree.h	667;"	d
RB_FOREACH	sys-tree.h	672;"	d
RB_GENERATE	sys-tree.h	389;"	d
RB_HEAD	sys-tree.h	291;"	d
RB_INF	sys-tree.h	663;"	d
RB_INIT	sys-tree.h	299;"	d
RB_INITIALIZER	sys-tree.h	296;"	d
RB_INSERT	sys-tree.h	665;"	d
RB_LEFT	sys-tree.h	313;"	d
RB_MAX	sys-tree.h	670;"	d
RB_MIN	sys-tree.h	669;"	d
RB_NEGINF	sys-tree.h	662;"	d
RB_NEXT	sys-tree.h	668;"	d
RB_PARENT	sys-tree.h	315;"	d
RB_PROTOTYPE	sys-tree.h	376;"	d
RB_RED	sys-tree.h	304;"	d
RB_REMOVE	sys-tree.h	666;"	d
RB_RIGHT	sys-tree.h	314;"	d
RB_ROOT	sys-tree.h	317;"	d
RB_ROTATE_LEFT	sys-tree.h	335;"	d
RB_ROTATE_RIGHT	sys-tree.h	355;"	d
RB_SET	sys-tree.h	320;"	d
RB_SET_BLACKRED	sys-tree.h	326;"	d
SPLAY_ASSEMBLE	sys-tree.h	105;"	d
SPLAY_EMPTY	sys-tree.h	78;"	d
SPLAY_ENTRY	sys-tree.h	69;"	d
SPLAY_FIND	sys-tree.h	278;"	d
SPLAY_FOREACH	sys-tree.h	285;"	d
SPLAY_GENERATE	sys-tree.h	156;"	d
SPLAY_HEAD	sys-tree.h	57;"	d
SPLAY_INF	sys-tree.h	274;"	d
SPLAY_INIT	sys-tree.h	65;"	d
SPLAY_INITIALIZER	sys-tree.h	62;"	d
SPLAY_INSERT	sys-tree.h	276;"	d
SPLAY_LEFT	sys-tree.h	75;"	d
SPLAY_LINKLEFT	sys-tree.h	93;"	d
SPLAY_LINKRIGHT	sys-tree.h	99;"	d
SPLAY_MAX	sys-tree.h	282;"	d
SPLAY_MIN	sys-tree.h	280;"	d
SPLAY_NEGINF	sys-tree.h	273;"	d
SPLAY_NEXT	sys-tree.h	279;"	d
SPLAY_PROTOTYPE	sys-tree.h	114;"	d
SPLAY_REMOVE	sys-tree.h	277;"	d
SPLAY_RIGHT	sys-tree.h	76;"	d
SPLAY_ROOT	sys-tree.h	77;"	d
SPLAY_ROTATE_LEFT	sys-tree.h	87;"	d
SPLAY_ROTATE_RIGHT	sys-tree.h	81;"	d
_SYS_TREE_H_	sys-tree.h	28;"	d
EXPIRY_ENTRY	treetype.h	57;"	d
EXPIRY_ENTRY	treetype.h	69;"	d
EXPIRY_FIND	treetype.h	61;"	d
EXPIRY_FIND	treetype.h	73;"	d
EXPIRY_FOREACH	treetype.h	63;"	d
EXPIRY_FOREACH	treetype.h	75;"	d
EXPIRY_GENERATE	treetype.h	59;"	d
EXPIRY_GENERATE	treetype.h	71;"	d
EXPIRY_HEAD	treetype.h	56;"	d
EXPIRY_HEAD	treetype.h	68;"	d
EXPIRY_INIT	treetype.h	66;"	d
EXPIRY_INIT	treetype.h	78;"	d
EXPIRY_INSERT	treetype.h	60;"	d
EXPIRY_INSERT	treetype.h	72;"	d
EXPIRY_MIN	treetype.h	64;"	d
EXPIRY_MIN	treetype.h	76;"	d
EXPIRY_NEXT	treetype.h	65;"	d
EXPIRY_NEXT	treetype.h	77;"	d
EXPIRY_PROTOTYPE	treetype.h	58;"	d
EXPIRY_PROTOTYPE	treetype.h	70;"	d
EXPIRY_REMOVE	treetype.h	62;"	d
EXPIRY_REMOVE	treetype.h	74;"	d
FLOW_ENTRY	treetype.h	29;"	d
FLOW_ENTRY	treetype.h	41;"	d
FLOW_FIND	treetype.h	33;"	d
FLOW_FIND	treetype.h	45;"	d
FLOW_FOREACH	treetype.h	35;"	d
FLOW_FOREACH	treetype.h	47;"	d
FLOW_GENERATE	treetype.h	31;"	d
FLOW_GENERATE	treetype.h	43;"	d
FLOW_HEAD	treetype.h	28;"	d
FLOW_HEAD	treetype.h	40;"	d
FLOW_INIT	treetype.h	38;"	d
FLOW_INIT	treetype.h	50;"	d
FLOW_INSERT	treetype.h	32;"	d
FLOW_INSERT	treetype.h	44;"	d
FLOW_MIN	treetype.h	36;"	d
FLOW_MIN	treetype.h	48;"	d
FLOW_NEXT	treetype.h	37;"	d
FLOW_NEXT	treetype.h	49;"	d
FLOW_PROTOTYPE	treetype.h	30;"	d
FLOW_PROTOTYPE	treetype.h	42;"	d
FLOW_REMOVE	treetype.h	34;"	d
FLOW_REMOVE	treetype.h	46;"	d
